name: Build and Release APK

on:
  push:
    tags:
      - 'v*' # Trigger on version tags like v1.0.0, v1.1.0, etc.

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Debug secret access
        run: |
          echo "Testing secret access..."
          if [ -n "${{ secrets.GOOGLE_API_KEY }}" ]; then
            echo "GOOGLE_API_KEY is set (length: ${#GOOGLE_API_KEY})"
          else
            echo "GOOGLE_API_KEY is not set"
          fi
          if [ -n "${{ secrets.STADIA_MAPS_API_KEY }}" ]; then
            echo "STADIA_MAPS_API_KEY is set (length: ${#STADIA_MAPS_API_KEY})"
          else
            echo "STADIA_MAPS_API_KEY is not set"
          fi
          if [ -n "${{ secrets.SYNCFUSION_LICENSE_KEY }}" ]; then
            echo "SYNCFUSION_LICENSE_KEY is set (length: ${#SYNCFUSION_LICENSE_KEY})"
          else
            echo "SYNCFUSION_LICENSE_KEY is not set"
          fi
        
      - name: Create API config for build
        run: |
          mkdir -p lib/config
          cat > lib/config/api_config.dart << EOF
          class ApiConfig {
            // API keys from GitHub Secrets
            static const String stadiaMapsApiKey = '${{ secrets.STADIA_MAPS_API_KEY }}';
            static const String googleApiKey = '${{ secrets.GOOGLE_API_KEY }}';
            static const String syncfusionLicenseKey = '${{ secrets.SYNCFUSION_LICENSE_KEY }}';
            
            // Check if a valid SyncFusion license key is configured
            static bool get hasValidSyncfusionLicense => syncfusionLicenseKey.isNotEmpty;
            
            // Base URLs for Stadia Maps tiles
            static String get lightTileUrl => 
              'https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png?api_key=\$stadiaMapsApiKey';
            
            static String get darkTileUrl => 
              'https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png?api_key=\$stadiaMapsApiKey';
          }
          EOF
        
      - name: Build APK
        run: flutter build apk --release
        
      - name: Create Release
        uses: actions/github-script@v7
        with:
          script: |
            const tag = context.ref.replace('refs/tags/', '');
            const releaseName = `South Dakota Weather App ${tag}`;
            
            const releaseBody = `## South Dakota Weather App ${tag}
            
            ### What's New in v2.0.0
            - **Advanced Location Services** - GPS-based weather with smart caching
            - **Centralized Navigation System** - Easier to maintain and extend
            - **Enhanced Security** - Consolidated API key management
            - **Professional Charts** - SyncFusion charts without watermarks
            - **Improved Performance** - Location caching and optimized builds
            
            ### Features
            - Real-time weather data for South Dakota cities and GPS location
            - National Weather Service alerts
            - Hourly and daily forecasts
            - Weather radar with interactive maps
            - Area Forecast Discussions (AFD)
            - Storm Prediction Center outlooks
            - Historical weather almanac
            - Smart location caching for faster loading
            
            ### Installation
            1. Download the APK file above
            2. Enable "Install from Unknown Sources" in your Android settings
            3. Install the APK file
            
            ### System Requirements
            - Android 5.0 (API level 21) or higher
            
            ### Support
            If you encounter any issues, please report them on the GitHub repository.`;
            
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tag,
              name: releaseName,
              body: releaseBody,
              draft: false,
              prerelease: false
            });
            
            core.setOutput('upload_url', release.data.upload_url);
          
      - name: Upload APK to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/app/outputs/flutter-apk/app-release.apk
          asset_name: sodak-weather-${{ github.ref_name }}.apk
          asset_content_type: application/vnd.android.package-archive 