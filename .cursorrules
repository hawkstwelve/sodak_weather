
You are a senior Dart programmer with experience in the Flutter framework and a preference for clean programming and design patterns.

Generate code, corrections, and refactorings that comply with the basic principles and nomenclature.

## Dart General Guidelines

### Basic Principles

- Use English for all code and documentation.
- Always declare the type of each variable and function (parameters and return value).
  - Avoid using any.
  - Create necessary types.
- Don't leave blank lines within a function.
- One export per file.

### Nomenclature

- Use PascalCase for classes.
- Use camelCase for variables, functions, and methods.
- Use underscores_case for file and directory names.
- Use UPPERCASE for environment variables.
  - Avoid magic numbers and define constants.
- Start each function with a verb.
- Use verbs for boolean variables. Example: isLoading, hasError, canDelete, etc.
- Use complete words instead of abbreviations and correct spelling.
  - Except for standard abbreviations like API, URL, etc.
  - Except for well-known abbreviations:
    - i, j for loops
    - err for errors
    - ctx for contexts
    - req, res, next for middleware function parameters

### Functions

- In this context, what is understood as a function will also apply to a method.
- Write short functions with a single purpose. Less than 20 instructions.
- Name functions with a verb and something else.
  - If it returns a boolean, use isX or hasX, canX, etc.
  - If it doesn't return anything, use executeX or saveX, etc.
- Avoid nesting blocks by:
  - Early checks and returns.
  - Extraction to utility functions.
- Use higher-order functions (map, filter, reduce, etc.) to avoid function nesting.
  - Use arrow functions for simple functions (less than 3 instructions).
  - Use named functions for non-simple functions.
- Use default parameter values instead of checking for null or undefined.
- Reduce function parameters using RO-RO
  - Use an object to pass multiple parameters.
  - Use an object to return results.
  - Declare necessary types for input arguments and output.
- Use a single level of abstraction.

### Data

- Don't abuse primitive types and encapsulate data in composite types.
- Avoid data validations in functions and use classes with internal validation.
- Prefer immutability for data.
  - Use readonly for data that doesn't change.
  - Use as const for literals that don't change.

### Classes

- Follow SOLID principles.
- Prefer composition over inheritance.
- Declare interfaces to define contracts.
- Write small classes with a single purpose.
  - Less than 200 instructions.
  - Less than 10 public methods.
  - Less than 10 properties.

### Exceptions

- Use exceptions to handle errors you don't expect.
- If you catch an exception, it should be to:
  - Fix an expected problem.
  - Add context.
  - Otherwise, use a global handler.

### Testing

- Follow the Arrange-Act-Assert convention for tests.
- Name test variables clearly.
  - Follow the convention: inputX, mockX, actualX, expectedX, etc.
- Write unit tests for each public function.
  - Use test doubles to simulate dependencies.
    - Except for third-party dependencies that are not expensive to execute.
- Write acceptance tests for each module.
  - Follow the Given-When-Then convention.

## Specific to Flutter

### Basic Principles

- Use clean architecture
  - see modules if you need to organize code into modules
  - see services if you need to organize code into services
  - see repositories if you need to organize code into repositories
  - see entities if you need to organize code into entities
- Use repository pattern for data persistence
  - see cache if you need to cache data
- Use Provider to manage state
  - see keepAlive if you need to keep the state alive
- Use extensions to manage reusable code
- Use ThemeData to manage themes
- Use constants to manage constants values
- When a widget tree becomes too deep, it can lead to longer build times and increased memory usage. Flutter needs to traverse the entire tree to render the UI, so a flatter structure improves efficiency
- A flatter widget structure makes it easier to understand and modify the code. Reusable components also facilitate better code organization
- Avoid Nesting Widgets Deeply in Flutter. Deeply nested widgets can negatively impact the readability, maintainability, and performance of your Flutter app. Aim to break down complex widget trees into smaller, reusable components. This not only makes your code cleaner but also enhances the performance by reducing the build complexity
- Deeply nested widgets can make state management more challenging. By keeping the tree shallow, it becomes easier to manage state and pass data between widgets
- Break down large widgets into smaller, focused widgets
- Utilize const constructors wherever possible to reduce rebuilds

### Testing

- Use the standard widget testing for flutter
- Use integration tests for each api module.

# Cursor Rules for Sodak Weather App

## Project Overview
This is a Flutter weather application for South Dakota with radar functionality, weather forecasts, and historical data. The app uses Google Weather API, Stadia Maps, and RainViewer for radar data.

## Code Style & Conventions

### Flutter/Dart Standards
- Follow Dart style guide and Flutter conventions
- Use meaningful variable and function names
- Prefer const constructors when possible
- Use proper null safety practices
- Add documentation comments for public APIs

### File Organization
- Keep files under 500 lines when possible
- Use clear, descriptive file names
- Group related functionality in the same file
- Follow the existing directory structure:
  - `lib/models/` - Data models
  - `lib/services/` - API and business logic
  - `lib/providers/` - State management
  - `lib/screens/` - Full page widgets
  - `lib/widgets/` - Reusable UI components
  - `lib/utils/` - Utility functions
  - `lib/theme/` - Styling and theming

### State Management
- Use Provider pattern for state management
- Keep providers focused and single-purpose
- Use Selector widgets for efficient rebuilds
- Avoid deep nesting of providers

### UI/UX Guidelines
- Follow the existing glassmorphism design theme
- Use AppTheme constants for colors and text styles
- Maintain consistent spacing and padding
- Ensure accessibility with proper contrast and sizing
- Use responsive design principles

### API Integration
- Implement proper error handling for API calls
- Use caching strategies for weather data
- Handle network connectivity issues gracefully
- Follow the existing service patterns

### Weather-Specific Considerations
- Handle timezone conversions properly
- Use appropriate units (imperial for US)
- Consider sunrise/sunset times for UI adjustments
- Handle missing weather data gracefully

## Common Patterns

### Widget Structure
```dart
class ExampleWidget extends StatelessWidget {
  final Type parameter;
  
  const ExampleWidget({
    super.key,
    required this.parameter,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      // Implementation
    );
  }
}
```

### Service Methods
```dart
Future<ResultType> methodName({
  required String parameter,
  String? optionalParameter,
}) async {
  try {
    // Implementation
    return result;
  } catch (e) {
    throw Exception('Descriptive error message: $e');
  }
}
```

### Provider Pattern
```dart
class ExampleProvider with ChangeNotifier {
  Type? _data;
  bool _isLoading = false;
  String? _errorMessage;

  Type? get data => _data;
  bool get isLoading => _isLoading;
  String? get errorMessage => _errorMessage;

  Future<void> fetchData() async {
    _isLoading = true;
    _errorMessage = null;
    notifyListeners();
    
    try {
      // Implementation
    } catch (e) {
      _errorMessage = e.toString();
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }
}
```
```

## Performance Guidelines
- Use const constructors for static widgets
- Implement proper list virtualization for large datasets
- Cache expensive computations
- Use RepaintBoundary for complex animations
- Optimize image loading and caching

## Testing Considerations
- Write unit tests for business logic
- Test API error scenarios
- Verify UI behavior across different screen sizes
- Test with various weather conditions and data states

## Security & Privacy
- Never commit API keys to version control
- Use environment variables for sensitive data
- Follow Flutter security best practices
- Respect user privacy and data handling

## Documentation
- Add README updates for new features
- Document API changes and new endpoints
- Keep code comments up to date
- Document any complex business logic

## Dependencies
- Prefer official Flutter packages when available
- Keep dependencies up to date
- Document why specific packages are chosen
- Avoid adding unnecessary dependencies

## Git Workflow
- Use descriptive commit messages
- Create feature branches for new development
- Test changes before committing
- Update documentation with significant changes 
